sudo  mysql

mysql -u root -p

CREATE USER 'deploy'@'localhost' IDENTIFIED BY 'pass!';

ALTER USER 'deploy'@'localhost' IDENTIFIED WITH mysql_native_password BY 'pass!';

TO SHOW DATABSE USERS => SELECT User,Host FROM mysql.user;

grant all privileges on designguide.* to 'deploy'@'localhost';


=====================================================================================================================================

Give folder access to read and write
sudo chown -R $USER:$USER ./DesignGuide-web/

===========================================================================================================================================
to make symbolink for defferents websites with new files

# sudo nano /etc/nginx/sites-enabled/design-guide
# sudo ln -s /etc/nginx/sites-available/design-guide /etc/nginx/sites-enabled/design-guide

==================================================================================================================================================

passenger_ruby /home/deploy/.rvm/gems/ruby-2.7.2@designguide/wrappers/ruby;
set this one in your nginx file or sudo nano /etc/nginx/conf.d/mod-http-passenger.conf

===============================================================================================================================
CREATE FILE WITH THE NAME OF deploy/production.rb
# server-based syntax
# ======================
# Defines a single server with a list of roles and multiple properties.
# You can define all roles on a single server, or split them:

# server "example.com", user: "deploy", roles: %w{app db web}, my_property: :my_value
# server "example.com", user: "deploy", roles: %w{app web}, other_property: :other_value
# server "db.example.com", user: "deploy", roles: %w{db}
server "IP", user: "deploy", roles: %w{app db web}

# role-based syntax
# ==================

# Defines a role with one or multiple servers. The primary server in each
# group is considered to be the first unless any hosts have the primary
# property set. Specify the username and a domain or IP for the server.
# Don't use `:all`, it's a meta role.

# role :app, %w{deploy@example.com}, my_property: :my_value
# role :web, %w{user1@primary.com user2@additional.com}, other_property: :other_value
# role :db,  %w{deploy@example.com}



# Configuration
# =============
# You can set any configuration variable like in config/deploy.rb
# These variables are then only loaded and set in this stage.
# For available Capistrano configuration variables see the documentation page.
# http://capistranorb.com/documentation/getting-started/configuration/
# Feel free to add new variables to customise your setup.



# Custom SSH Options
# ==================
# You may pass any option but keep in mind that net/ssh understands a
# limited set of options, consult the Net::SSH documentation.
# http://net-ssh.github.io/net-ssh/classes/Net/SSH.html#method-c-start
#
# Global options
# --------------
 # set :ssh_options, {
 #   keys: %w(/home/user/.ssh/id_aymen.pub),
 #   forward_agent: true,
 #   # auth_methods: %w(/home/user/.ssh/id_aymen)
 # }
#
# The server-based syntax can be used to override options:
# ------------------------------------
# server "example.com",
#   user: "user_name",
#   roles: %w{web app},
#   ssh_options: {
#     user: "user_name", # overrides user setting above
#     keys: %w(/home/user_name/.ssh/id_rsa),
#     forward_agent: false,
#     auth_methods: %w(publickey password)
#     # password: "please use keys"
#   }
===========================================================================================================================================
create config/deploy.rb
================
# config valid for current version and patch releases of Capistrano
lock "~> 3.17.0"
# gem install capistrano -v "~>3.16.0"

set :application, "design-guide"
set :repo_url, "git@github.com:brianshaw/abc.git"

# Default branch is :master
set :branch, :master
# set :branch, :production
# ask :branch, `git rev-parse --abbrev-ref HEAD`.chomp

# Default deploy_to directory is /var/www/my_app_name
set :deploy_to, "/home/deploy/#{fetch :application}"

# Default value for :format is :airbrussh.
# set :format, :airbrussh

# You can configure the Airbrussh format using :format_options.
# These are the defaults.
# set :format_options, command_output: true, log_file: "log/capistrano.log", color: :auto, truncate: :auto

# Default value for :pty is false
set :pty,  false

# Default value for :linked_files is []
append :linked_files, "config/master.key"

# Default value for linked_dirs is []
append :linked_dirs, "log", "tmp/pids", "tmp/cache", "tmp/sockets", "public/system", "public/uploads", "vendor/bundle", ".bundle", "storage"

# Default value for default_env is {}
# set :default_env, { path: "/opt/ruby/bin:$PATH" }

# Default value for local_user is ENV['USER']
# set :local_user, -> { `git config user.name`.chomp }

# Default value for keep_releases is 5
set :keep_releases, 1

# Uncomment the following to require manually verifying the host key before first deploy.
# set :ssh_options, verify_host_key: :secure

set :sidekiq_service_unit_user, :system

# SSHKit.config.command_map[:sidekiq] = "bundle exec sidekiq"
# SSHKit.config.command_map[:sidekiqctl] = "bundle exec sidekiqctl"
SSHKit.config.command_map[:sidekiq] = "~/.rvm/bin/rvm default do bundle exec sidekiq"
SSHKit.config.command_map[:sidekiqctl] = "~/.rvm/bin/rvm default do bundle exec sidekiqctl"
========================================================================================================================================
craete app/Capefile.rb
==========
# Load DSL and set up stages
require "capistrano/setup"

# Include default deployment tasks
require "capistrano/deploy"

# Load the SCM plugin appropriate to your project
require "capistrano/scm/git"
install_plugin Capistrano::SCM::Git

require 'capistrano/sidekiq'
install_plugin Capistrano::Sidekiq
install_plugin Capistrano::Sidekiq::Systemd

# Include tasks from other gems included in your Gemfile
#
# For documentation on these, see for example:
#
#   https://github.com/capistrano/rvm
#   https://github.com/capistrano/bundler
#   https://github.com/capistrano/rails
#   https://github.com/capistrano/passenger
#
require "capistrano/rvm"
require "capistrano/bundler"
require "capistrano/rails/assets"
require "capistrano/rails/migrations"
require "capistrano/passenger"

# Load custom tasks from `lib/capistrano/tasks` if you have any defined
Dir.glob("lib/capistrano/tasks/*.rake").each { |r| import r }

